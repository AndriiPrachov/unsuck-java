import org.springframework.boot.gradle.tasks.run.BootRun

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath errorprone
        classpath springDepManager
        classpath springBoot
    }
}

allprojects {
    group = "awsm"
    version = "UNSPECIFIED"
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'net.ltgt.errorprone'

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven() {
            url cronapp
        }
    }

    dependencyManagement {
        imports {
            mavenBom springBootBom
        }
    }

    dependencies {
        implementation commonsLang
        implementation gsonExtras
        implementation noException
        implementation guava
        implementation streamEx
        implementation faker
        implementation threeten
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_12
        targetCompatibility = JavaVersion.VERSION_12
    }

    checkstyle {
        toolVersion = "8.23"
    }

    tasks.withType(Test) {
        maxParallelForks = 4
        useJUnitPlatform()
        mustRunAfter = [ jacocoTestCoverageVerification ]
    }

    tasks.withType(JavaCompile).each {
        it.options.errorprone { e ->
            e.disableWarningsInGeneratedCode = true
            e.disable "TypeParameterUnusedInFormals"
            e.option "NullAway:AnnotatedPackages", "awsm"
            e.option "NullAway:ExcludedFieldAnnotations", "org.springframework.beans.factory.annotation.Autowired"
            e.option "NullAway:ExternalInitAnnotations"
        }
    }

    tasks.withType(Checkstyle) {
        exclude 'jooq'
    }

    tasks.jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.7
                }
            }
        }
    }

    compileJava {
        options.annotationProcessorPath = configurations.annotationProcessor
    }

    dependencies {
        errorprone errorproneCore
        errorprone nullaway

        testImplementation testContainersPg
        testImplementation wiremock
        testImplementation springBootTest
        testImplementation spockSpring
    }
}

project(':application') {
    apply plugin: 'org.springframework.boot'
    dependencies {
        implementation project(':domain')
        implementation project(':infrastructure')
        implementation(springBootWeb) {
            exclude module: "spring-boot-starter-tomcat"
            because 'we use Jetty instead of Tomcat'
        }
        implementation pipelinr
        implementation springBootJetty
        implementation springBootJdbc
        testImplementation archUnit
    }
    task bootDevRun(type: BootRun) {
        group = "Application"
        description = "Runs this project as a Spring Boot application in dev mode."
        doFirst() {
            main = mainApp
            classpath = sourceSets.test.runtimeClasspath
            systemProperty 'spring.profiles.active', 'dev'
        }
    }

}

project(':domain') {
    dependencies {
        implementation project(":infrastructure")
        implementation project(":database")
    }
    dependencies {
        implementation javaxJson
        implementation jooq
        implementation failsafe
        implementation springTx
        implementation springContext
    }
}

project(':infrastructure') {
    dependencies {
        implementation project(":database")
        implementation failsafe
        implementation jooq
        implementation hashIds
        implementation pipelinr
        implementation springTx
        implementation springWebMvc
    }
}

project(':database') {
    dependencies {
        implementation flyway
        implementation jooq
        implementation postgres
    }
}