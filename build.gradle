import org.flywaydb.core.Flyway
import org.jooq.codegen.GenerationTool
import org.jooq.meta.postgres.PostgresDatabase
import org.postgresql.Driver
import org.testcontainers.containers.PostgreSQLContainer
import org.jooq.meta.jaxb.*

import java.time.Duration;

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath("org.testcontainers:postgresql:1.12.2")
        classpath("org.flywaydb:flyway-core:6.0.7")
        classpath("org.postgresql:postgresql:42.2.8")
        classpath("org.jooq:jooq:3.12.1")
        classpath("org.jooq:jooq-meta:3.12.1")
        classpath("org.jooq:jooq-codegen:3.12.1")
    }
}

plugins {
    id 'java'
    id 'jacoco'
//    id 'net.ltgt.apt-idea' version '0.21'
//    id 'checkstyle'
    id 'org.springframework.boot' version "$springVersion"
    id 'net.ltgt.errorprone' version '0.8.1'
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
    maven() {
        url "https://artifactory.cronapp.io/public-release/"
    }
}

group = "net.sizovs"
version = "UNSPECIFIED"

def jooqOutput = "$buildDir/generated-src/jooq"

java {
    sourceCompatibility = JavaVersion.VERSION_13
    targetCompatibility = JavaVersion.VERSION_13
}


// doesn't work in Java 13 yet
//checkstyle {
//    toolVersion = "8.23"
//}

tasks {
    "check" {
        dependsOn(jacocoTestCoverageVerification)
    }
}

compileJava {
    options.compilerArgs += ["--enable-preview"]
    options.annotationProcessorPath = configurations.annotationProcessor
}
test {
    jvmArgs '--enable-preview'
}

sourceSets {
    main {
        java {
            srcDirs += jooqOutput
        }
    }
}

tasks.withType(JavaCompile).each {
    it.options.compilerArgs.add "--enable-preview"
    it.options.errorprone { e ->
        e.disableWarningsInGeneratedCode.set(true)
        e.disable "TypeParameterUnusedInFormals"
        e.option "NullAway:AnnotatedPackages", "awsm"
        e.option """NullAway:ExcludedFieldAnnotations,org.mockito.Mock,org.springframework.beans.factory.annotation.Autowired"""
        e.option "NullAway:ExternalInitAnnotations"
    }
}

tasks.withType(Test) {
    maxParallelForks = 4
    timeout.set(Duration.ofMinutes(2))
    useJUnitPlatform()
}

task generateJooq {
    description = "Generates jOOQ sources."
    doLast {
        new PostgreSQLContainer("postgres:11.5").withCloseable { pg ->
            pg.start()

            def flyway = Flyway.configure()
                .locations("filesystem:src/main/resources/db/migration")
                .dataSource(pg.jdbcUrl, pg.username, pg.password)
                .load()

            flyway.migrate()

            def configuration = new Configuration()
                .withLogging(Logging.TRACE)
                .withJdbc(new Jdbc()
                        .withDriver(Driver.name)
                        .withUrl(pg.jdbcUrl)
                        .withUser(pg.username)
                        .withPassword(pg.password))
                .withGenerator(new Generator()
                        .withGenerate(new Generate()
                                .withJavaTimeTypes(true)
                                .withFluentSetters(true)
                        )
                        .withDatabase(new Database()
                                .withName(PostgresDatabase.name)
                                .withIncludes(".*")
                                .withExcludes("")
                                .withInputSchema("public")
                                .withForcedTypes(new ForcedType()
                                        .withUserType("javax.money.MonetaryAmount")
                                        .withConverter("awsm.infrastructure.jooq.MoneyConverter")
                                        .withIncludeExpression(".*")
                                        .withIncludeTypes("NUMERIC\\(13,\\s*2\\)")
                                )
                        )
                        .withTarget(new Target()
                                .withClean(true)
                                .withDirectory(jooqOutput)
                                .withPackageName("jooq")
                        )
                )

            GenerationTool.generate(configuration)
        }

    }
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.7
            }
        }
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web:$springVersion") {
        exclude module: "spring-boot-starter-tomcat"
    }

    errorprone("com.google.errorprone:error_prone_core:2.3.3")
    errorprone("com.uber.nullaway:nullaway:0.7.5")

    annotationProcessor "org.immutables:value:2.8.1"
    compileOnly("org.immutables:value-annotations:2.8.1")

    annotationProcessor("com.google.auto.factory:auto-factory:1.0-beta7")
    compileOnly("com.google.auto.factory:auto-factory:1.0-beta7")

    implementation("org.postgresql:postgresql:42.2.8")
    implementation("org.jooq:jooq:3.12.1")
    implementation("org.apache.commons:commons-lang3:3.9")
    implementation("org.hashids:hashids:1.0.3")
    implementation("net.jodah:failsafe:2.3.1")
    implementation("org.threeten:threeten-extra:1.5.0")
    implementation "com.github.javafaker:javafaker:1.0.0"
    implementation("org.javamoney.moneta:moneta-core:1.3")
    implementation("org.flywaydb:flyway-core:6.0.7")
    implementation("com.google.code.gson:gson-extras:2.8.5")
    implementation("org.springframework.boot:spring-boot-starter-data-jdbc:$springVersion")
    implementation("org.springframework.boot:spring-boot-starter-jetty:$springVersion")
    implementation("org.glassfish:javax.json:1.1.4")
    implementation("com.google.guava:guava:$guavaVersion")
    implementation("com.machinezoo.noexception:noexception:1.3.4")
    implementation("com.github.ben-manes.caffeine:caffeine:2.5.0")
    implementation("one.util:streamex:0.7.0")




    testImplementation "org.testcontainers:postgresql:1.12.2"
    testImplementation "com.github.tomakehurst:wiremock-jre8:2.25.0"
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springVersion"
    testImplementation "org.assertj:assertj-core:3.9.1"
    testImplementation "org.awaitility:awaitility:4.0.1"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.5.1"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.5.1"
    testImplementation "org.testcontainers:junit-jupiter:1.12.2"

    testImplementation "org.hamcrest:java-hamcrest:2.0.0.0"
    testImplementation "com.google.guava:guava-testlib:$guavaVersion"
    testImplementation "com.tngtech.archunit:archunit-junit5-engine:0.11.0"
    testImplementation "com.pivovarit:parallel-collectors:1.1.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.5.1"
}


